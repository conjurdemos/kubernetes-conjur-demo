#!/usr/bin/env bash

# Usage:
# ./test [platform] [database]
#
# Note: This script expects several environment variables to be
# defined and exported, some of which are sensitive/secret values.
# It is for this that we recommend to always call this script using summon.
#
# Recommended usage:
# summon --environment [platform] ./test [platform] [database]
#
# platform: gke or oc
# database: postgres or mysql

set -euo pipefail
IFS=$'\n\t'

# Clean up when script completes
function finish {
  announce 'Wrapping up and removing test environment'

  # Stop the running processes
  runDockerCommand "
    ./stop
    cd kubernetes-conjur-deploy-$UNIQUE_TEST_ID && ./stop
  "

  # Remove the deploy directory
  rm -rf ../kubernetes-conjur-deploy-$UNIQUE_TEST_ID

  # Delete registry images that were used
  deleteRegistryImage "$DOCKER_REGISTRY_PATH/haproxy:$CONJUR_NAMESPACE_NAME"
  deleteRegistryImage "$DOCKER_REGISTRY_PATH/conjur-appliance:$CONJUR_NAMESPACE_NAME"
}
trap finish EXIT

# Verify that arguments are passed to the script
function printUsage() {
  echo "---"
  echo "Usage:"
  echo "./test [platform] [database]"
  echo ""
  echo "Note: This script expects several environment variables to be defined and exported, some of which are sensitive/secret values. It is for this that we recommend to always call this script using summon."
  echo ""
  echo "Recommended Usage:"
  echo "summon --environment [platform] ./test [platform] [database]"
  echo ""
  echo "platform: gke or oc"
  echo "database: postgres or mysql"

  exit 1
}

function main() {
  announce 'Checking arguments'
  checkArguments

  announce 'Preparing test environment'
  prepareTestEnvironment

  announce 'Deploying Conjur'
  deployConjur

  announce 'Deploying demo'
  deployDemo
}

function deployConjur() {
  pushd ..
    #git clone --single-branch --branch master git@github.com:cyberark/kubernetes-conjur-deploy kubernetes-conjur-deploy-$UNIQUE_TEST_ID
    git clone --single-branch --branch openshift_deploy_configs git@github.com:cyberark/kubernetes-conjur-deploy kubernetes-conjur-deploy-$UNIQUE_TEST_ID
  popd

  runDockerCommand "cd kubernetes-conjur-deploy-$UNIQUE_TEST_ID && CONJUR_LOG_LEVEL=debug ./start"
}

function deployDemo() {
  runDockerCommand "./start"
}

# Sets additional required environment variables that aren't available in the
# secrets.yml file, and performs other preparatory steps
function prepareTestEnvironment() {
  # Set environment variables
  local registry='registry2.itci.conjur.net/conjur-appliance'

  export UNIQUE_TEST_ID="$(uuidgen | tr "[:upper:]" "[:lower:]" | head -c 10)"

  export CONJUR_NAMESPACE_NAME=conjur-5-$UNIQUE_TEST_ID-test
  export AUTHENTICATOR_ID=conjur-5-$UNIQUE_TEST_ID-test
  export TEST_APP_NAMESPACE_NAME=test-app-5-$UNIQUE_TEST_ID

  export CONJUR_VERSION=5 # still required by kubernetes-conjur-deploy

  export DEPLOY_MASTER_CLUSTER=true

  export MINI_ENV=false

  export CONJUR_DEMO_TEST_IMAGE=conjur-demo-5-$UNIQUE_TEST_ID

  export CONJUR_APPLIANCE_IMAGE=$registry:5.0-stable

  export CONJUR_AUTHN_LOGIN_RESOURCE="${CONJUR_AUTHN_LOGIN_RESOURCE:-service_account}"

  # Prepare Docker images
  docker pull $CONJUR_APPLIANCE_IMAGE
  docker build --tag $CONJUR_DEMO_TEST_IMAGE:$CONJUR_NAMESPACE_NAME \
    --file Dockerfile \
    --build-arg OPENSHIFT_CLI_URL=$OPENSHIFT_CLI_URL \
    --build-arg KUBECTL_CLI_URL=$KUBECTL_CLI_URL \
    .
}

# Delete an image from GCR, unless it is has multiple tags pointing to it
# This means another parallel build is using the image and we should
# just untag it to be deleted by the later job
function deleteRegistryImage() {
  local image_and_tag=$1

  IFS=':' read -r -a array <<< $image_and_tag
  local image="${array[0]}"
  local tag="${array[1]}"

  if [[ "$PLATFORM" = "kubernetes" ]]; then
    runDockerCommand "
      if gcloud container images list-tags $image | grep $tag; then
        gcloud container images delete --force-delete-tags -q $image_and_tag
      fi
    "
  fi
}

function runDockerCommand() {
  docker run --rm \
    -i \
    -e CONJUR_VERSION \
    -e CONJUR_APPLIANCE_IMAGE \
    -e CONJUR_NAMESPACE_NAME \
    -e CONJUR_ACCOUNT \
    -e CONJUR_ADMIN_PASSWORD \
    -e CONJUR_AUTHN_LOGIN_RESOURCE \
    -e AUTHENTICATOR_ID \
    -e TEST_APP_NAMESPACE_NAME \
    -e TEST_APP_DATABASE \
    -e PLATFORM \
    -e DOCKER_REGISTRY_URL \
    -e DOCKER_REGISTRY_PATH \
    -e MINI_ENV \
    -e DEPLOY_MASTER_CLUSTER \
    -e GCLOUD_SERVICE_KEY=/tmp$GCLOUD_SERVICE_KEY \
    -e GCLOUD_CLUSTER_NAME \
    -e GCLOUD_ZONE \
    -e GCLOUD_PROJECT_NAME \
    -e OPENSHIFT_URL \
    -e OPENSHIFT_USERNAME \
    -e OPENSHIFT_PASSWORD \
    -e OSHIFT_CONJUR_ADMIN_USERNAME \
    -e OSHIFT_CLUSTER_ADMIN_USERNAME \
    -v $GCLOUD_SERVICE_KEY:/tmp$GCLOUD_SERVICE_KEY \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v ~/.config:/root/.config \
    -v "$PWD/..":/src \
    -w /src \
    $CONJUR_DEMO_TEST_IMAGE:$CONJUR_NAMESPACE_NAME \
    bash -c "
      ./ci/platform_login
      $1
    "
}

function announce() {
  echo "++++++++++++++++++++++++++++++++++++++"
  echo ""
  echo "$@"
  echo ""
  echo "++++++++++++++++++++++++++++++++++++++"
}

# Check that the argument values are valid
function checkArguments() {
  if [[ "$TEST_PLATFORM" != "gke" && "$TEST_PLATFORM" != "oc" ]]; then
   echo "The only valid platform values are 'gke' and 'oc'"
  else
    return 0
  fi

  printUsage
}

# Parse input arguments
if [[ $# -ne 2 ]]; then
  echo "Invalid number of arguments."
  printUsage
fi

TEST_PLATFORM="$1"
TEST_APP_DATABASE="$2"

export TEST_PLATFORM
export TEST_APP_DATABASE

# sensible default for OPENSHIFT_URL port
if [[ -n "${OPENSHIFT_URL}" ]] && [[ "${OPENSHIFT_URL}" != *: ]]; then
 OPENSHIFT_URL="${OPENSHIFT_URL}:8443"
fi

main
